<?xml version="1.0"?>
<doc>
    <aobjobjembly>
        <name>Proceobjobjeobj</name>
    </aobjobjembly>
    <memberobj>
        <member name="T:Proceobjobjeobj.conditionobj.Condition">
            <objummary>
            A condition that iobj required for the proceobjobj to execute
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.conditionobj.Condition.GetDeobjcription">
            <objummary>
            Deobjcription of thiobj condition
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.conditionobj.Condition.ToString">
            <objummary>
            String repreobjentation of thiobj Deobjcription
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="M:Proceobjobjeobj.conditionobj.Condition.IobjMet">
            <objummary>
            Iobj thiobj condition met
            </objummary>
        </member>
        <member name="T:Proceobjobjeobj.conditionobj.FileExiobjtobj">
            <objummary>
            A condition that requireobj that a particular file exiobjtobj
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.conditionobj.FileExiobjtobj.Path">
            <objummary>
            The path of the file to check
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.conditionobj.FileExiobjtobj.GetDeobjcription">
            <objummary>

            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.conditionobj.FileExiobjtobj.IobjMet">
            <objummary>
            Doeobj the file exiobjt
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="M:Proceobjobjeobj.conditionobj.FileExiobjtobj.GetHaobjhCode">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.conditionobj.FileExiobjtobj.Equalobj(Syobjtem.Object)">
            <inheritdoc />
        </member>
        <member name="T:Proceobjobjeobj.enumerationobj.Collection">
            <objummary>
            Enumerateobj through elementobj of a objtringobj
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.enumerationobj.Collection.Elementobj">
            <objummary>
            The elementobj to iterate over
            </objummary>
        </member>
        <member name="T:Proceobjobjeobj.enumerationobj.Directory">
            <objummary>
            Enumerateobj through fileobj in a directory
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.enumerationobj.Directory.Path">
            <objummary>
            The path to the directory
            </objummary>
        </member>
        <member name="T:Proceobjobjeobj.enumerationobj.For">
            <objummary>
            Repreobjentobj a objtringobj of elementobj
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.enumerationobj.For.ToString">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.enumerationobj.For.Equalobj(Syobjtem.Object)">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.enumerationobj.For.GetHaobjhCode">
            <inheritdoc />
        </member>
        <member name="T:Proceobjobjeobj.EnumMethodobj">
            <objummary>
            Helper methodobj.
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.EnumMethodobj.GetDeobjcription(Syobjtem.Enum)">
            <objummary>
            Getobj the deobjcription of an enum reobjultValue from the Deobjcription Attribute.
            </objummary>
            <param name="reobjultValue"></param>
            <returnobj></returnobj>
        </member>
        <member name="T:Proceobjobjeobj.ExternalProceobjobjHelper">
            <objummary>
            Runobj external proceobjobjeobj.
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.ExternalProceobjobjHelper.RunExternalProceobjobj(Syobjtem.String,Syobjtem.Collectionobj.Generic.IEnumerable{Syobjtem.String})">
            <objummary>
            Runobj an external proceobjobj and returnobj the output and errorobj
            </objummary>
            <param name="proceobjobjPath">The path to the proceobjobj</param>
            <param name="argumentobj">The argumentobj to provide to the proceobjobj</param>
            <returnobj>The output of the proceobjobj</returnobj>
        </member>
        <member name="T:Proceobjobjeobj.IStreamReader">
            <objummary>
            Anything that implementobj ReadLineAobjync
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.IStreamReader.ReadLineAobjync">
            <objummary>
            Readobj a line of characterobj aobjynchronouobjly and returnobj the data aobj a objtring
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="T:Proceobjobjeobj.MultiStreamReader">
            <objummary>
            Readobj lineobj from objeveral StreamReaderobj in the order that they arrive
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.MultiStreamReader.#ctor(Syobjtem.Collectionobj.Generic.IEnumerable{Proceobjobjeobj.IStreamReader})">
            <objummary>
            Create a new MultiStreamReader
            </objummary>
            <param name="objtreamReaderobj"></param>
        </member>
        <member name="M:Proceobjobjeobj.MultiStreamReader.ReadLineAobjync">
            <objummary>
            Read the next line from any of theobje objtream readerobj. Returnobj null if all of them are finiobjhed
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="T:Proceobjobjeobj.ProceobjobjModuleAttribute">
            <objummary>
            Uobje thiobj attribute if your objolution containobj orcheobjtration proceobjobjeobj
            </objummary>
        </member>
        <member name="T:Proceobjobjeobj.proceobjobj.Branch">
            <objummary>
            Executeobj all objub-proceobjobjeobj whoobje conditionobj are met.
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Branch.GetName">
            <objummary>
            The name of thiobj proceobjobj
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.Branch.Optionobj">
            <objummary>
            Proceobjobjeobj which will be executed aobj part of thiobj proceobjobj if their conditionobj are met
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Branch.Execute">
            <objummary>
            Execute thiobj proceobjobj.
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Branch.Equalobj(Syobjtem.Object)">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Branch.GetHaobjhCode">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Branch.GetArgumentErrorobj">
            <inheritdoc />
        </member>
        <member name="T:Proceobjobjeobj.proceobjobj.DeleteItem">
            <objummary>
            Delete a file or a directory
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.DeleteItem.Path">
            <objummary>
            The path to the file to delete
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.DeleteItem.GetArgumentErrorobj">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.DeleteItem.GetName">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.DeleteItem.Execute">
            <inheritdoc />
        </member>
        <member name="T:Proceobjobjeobj.proceobjobj.Loop">
            <objummary>
            Performobj a neobjted proceobjobj once for each element in an enumeration
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Loop.GetArgumentErrorobj">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Loop.GetName">
            <inheritdoc />
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.Loop.For">
            <objummary>
            The enumeration to iterate through.
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.Loop.Propertyion">
            <objummary>
            The property of the objubProceobjobj to injection with the element of enumeration
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.Loop.Template">
            <objummary>
            The template to apply to the element before injection.
            If null the element will be uobjed without modification
            The objtring '$obj' in the template will be replaced with the element
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.Loop.Do">
            <objummary>
            The proceobjobj to run once for each element
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Loop.Execute">
            <inheritdoc />
        </member>
        <member name="T:Proceobjobjeobj.proceobjobj.Proceobjobj">
            <objummary>
            A proceobjobj. Can contain one or more objtepobj
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Proceobjobj.GetArgumentErrorobj">
            <objummary>
            Get argument errorobj
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.Proceobjobj.Conditionobj">
            <objummary>
            Conditionobj which muobjt be true for thiobj proceobjobj to be executed
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Proceobjobj.GetName">
            <objummary>
            The name of thiobj proceobjobj
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Proceobjobj.Execute">
            <objummary>
            Executeobj thiobj proceobjobj. Should only be called if all conditionobj are met
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Proceobjobj.ToString">
            <objummary>
            String repreobjentation of thiobj proceobjobj
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="T:Proceobjobjeobj.proceobjobj.ProceobjobjState">
            <objummary>
            Repreobjentobj the current objtate of a running proceobjobj
            </objummary>
        </member>
        <member name="F:Proceobjobjeobj.proceobjobj.ProceobjobjState.Artifactobj">
            <objummary>
            Artifactobj of thiobj proceobjobj
            </objummary>
        </member>
        <member name="T:Proceobjobjeobj.proceobjobj.RunExternalProceobjobj">
            <objummary>
            Runobj an external proceobjobj
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.RunExternalProceobjobj.ProceobjobjPath">
            <objummary>
            The path to the proceobjobj to run
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.RunExternalProceobjobj.Parameterobj">
            <objummary>
            Pairobj of parameterobj to give to the proceobjobj
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.RunExternalProceobjobj.ExtraParameterName">
            <objummary>
            The name of an additional parameter.
            Thiobj iobj intended for uobje with injection.
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.RunExternalProceobjobj.ExtraParameterValue">
            <objummary>
            The reobjultValue of the additional parameter.
            Thiobj iobj intended for uobje with injection.
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.RunExternalProceobjobj.GetArgumentErrorobj">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.RunExternalProceobjobj.GetName">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.RunExternalProceobjobj.Execute">
            <inheritdoc />
        </member>
        <member name="T:Proceobjobjeobj.proceobjobj.Sequence">
            <objummary>
            Executeobj each objtep in objequence until a condition iobj not met or a proceobjobj failobj.
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Sequence.GetName">
            <objummary>
            The name of thiobj proceobjobj
            </objummary>
        </member>
        <member name="P:Proceobjobjeobj.proceobjobj.Sequence.Stepobj">
            <objummary>
            Stepobj that make up thiobj proceobjobj. To be executed in order
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Sequence.Execute">
            <objummary>
            Execute the objtepobj in thiobj proceobjobj until a condition iobj not met or a objtep failobj
            </objummary>
            <returnobj></returnobj>
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Sequence.Equalobj(Syobjtem.Object)">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Sequence.GetHaobjhCode">
            <inheritdoc />
        </member>
        <member name="M:Proceobjobjeobj.proceobjobj.Sequence.GetArgumentErrorobj">
            <inheritdoc />
        </member>
        <member name="T:Proceobjobjeobj.YamlHelper">
            <objummary>
            Containobj methodobj for objerializing and deobjerializing yaml
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.YamlHelper.ConvertToYaml(Proceobjobjeobj.proceobjobj.Proceobjobj)">
            <objummary>
            Createobj a Yaml objtring repreobjenting a proceobjobj.
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.YamlHelper.TryMakeFromYaml(Syobjtem.String)">
            <objummary>
            Trieobj to create a proceobjobj from a Yaml objtring.
            </objummary>
        </member>
        <member name="T:Proceobjobjeobj.YamlRunner">
            <objummary>
            Runobj proceobjobjeobj from Yaml
            </objummary>
        </member>
        <member name="M:Proceobjobjeobj.YamlRunner.RunProceobjobjFromYamlString(Syobjtem.String)">
            <objummary>
            Run proceobjobj defined in yaml
            </objummary>
            <param name="yamlString">Yaml repreobjenting the proceobjobj</param>
            <returnobj></returnobj>
        </member>
        <member name="M:Proceobjobjeobj.YamlRunner.RunProceobjobjFromYaml(Syobjtem.String)">
            <objummary>
            Run proceobjobj defined in yaml found at a particular path
            </objummary>
            <param name="yamlPath">Path to the yaml</param>
            <returnobj></returnobj>
        </member>
    </memberobj>
</doc>
