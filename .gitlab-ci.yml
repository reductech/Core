
image: mcr.microsoft.com/dotnet/core/sdk:3.1

include:
  - template: Code-Quality.gitlab-ci.yml

stages:
  - build
  - test
  - mutation
  - package
  - push

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH !~ /^\d+-/
    - if: $CI_COMMIT_TAG

variables:
  CONFIG_DEV: Debug
  CONFIG_RELEASE: Release
  NUGET_PROJECT_ID_DEV: 18697166
  NUGET_PROJECT_ID_RELEASE: 21286970

.rule defaults:
  conditions:
    - &is_master $CI_COMMIT_BRANCH == 'master'
    - &is_release $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?$/i
    - &not_release $CI_COMMIT_TAG !~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?$/i
  rules_dev: &rules_dev
    - if: *is_master
    - if: *not_release
  rules_release: &rules_release
    - if: *is_release
  rules_code_quality: &rules_code_quality
    - if: *is_master
    - when: manual
      allow_failure: true
  rules_push_dev: &rules_push_dev
    - if: *is_master
    - if: *not_release
      when: manual
      allow_failure: true
  rules_push_release: &rules_push_release
    - if: *is_release

build dev:
  stage: build
  variables:
    CONFIG: $CONFIG_DEV
    NUGET_PROJECT_ID: $NUGET_PROJECT_ID_DEV
    NUGET_USERNAME: $NUGET_USER_DEV
    NUGET_TOKEN: $NUGET_TOKEN_DEV
  before_script:
    - dotnet nuget add source --name reductech --username $NUGET_USERNAME
      --password $NUGET_TOKEN --store-password-in-clear-text
      "https://gitlab.com/api/v4/projects/$NUGET_PROJECT_ID/packages/nuget/index.json"
  script:
    - dotnet restore --packages ./packages
    - dotnet build --configuration $CONFIG --no-restore
  artifacts:
    paths:
      - '*/bin'
      - '*/obj'
      - packages/
    expire_in: 30 mins
  rules: *rules_dev

build release:
  extends: build dev
  variables:
    CONFIG: $CONFIG_RELEASE
    NUGET_PROJECT_ID: $NUGET_PROJECT_ID_RELEASE
    NUGET_USERNAME: $NUGET_USER_PROD
    NUGET_TOKEN: $NUGET_TOKEN_PROD
  rules: *rules_release

test:
  stage: test
  variables:
    CONFIG: $CONFIG_DEV
  script:
    - dotnet test --no-build --configuration $CONFIG --collect:"XPlat Code Coverage" --results-directory ./
    - >-
      pwsh -Command '$report = Get-Content -Path "*/coverage.cobertura.xml" -Raw ;
      $fixPaths = $report -replace "filename=`".+?${env:CI_PROJECT_NAME}(/|\\)", "filename=`"" ;
      [System.IO.File]::WriteAllText("./coverage.cobertura.xml", $fixPaths) ;
      $xml = [xml]$report ;
      $branchCoverage = [double]($xml.coverage."branch-rate") * 100 ;
      $lineCoverage = [double]($xml.coverage."line-rate") * 100 ;
      Write-Host "Coverage (Branch) : ${branchCoverage}%" ;
      Write-Host "Coverage (Line)   : ${lineCoverage}%"'
  coverage: /Coverage \(Branch\)[\s:]+(\d+.?\d*)%/
  artifacts:
    reports:
      cobertura: coverage.cobertura.xml
  rules: *rules_dev

test release:
  extends: test
  variables:
    CONFIG: $CONFIG_RELEASE
  rules: *rules_release

version check:
  stage: test
  variables:
    PROJECT_PATH: ./*/*.csproj
    PROJECT_FILTER: '*Tests*'
  script:
    - >-
      pwsh -Command 'Write-Host "Tag version : ${env:CI_COMMIT_TAG}" ;
      Get-ChildItem -Path $env:PROJECT_PATH -Exclude $env:PROJECT_FILTER | ForEach-Object {
          Write-Host "Checking $($_.BaseName)" ;
          $csproj = Get-Content $_.FullName -Raw ;
          $csproj -match "<Version>(.+?)(\$\(VersionSuffix\))?</Version>" | Out-Null ;
          $version = "v" + $Matches[1] ;
          Write-Host "Project version: $version" ;
          if ($version -ne $env:CI_COMMIT_TAG) {
              Write-Error "The project version $version does not match the release tag version ${env:CI_COMMIT_TAG}" ;
              exit 1
          }
      }'
  rules: *rules_release

code_quality:
  rules: *rules_code_quality

mutation testing:
  stage: mutation
  variables:
    PROJECT_TO_TEST: $CI_PROJECT_TITLE
  script:
    - dotnet tool restore
    - cd "$PROJECT_TO_TEST.Tests/"
    - dotnet dotnet-stryker --project-file "$PROJECT_TO_TEST.csproj" --test-runner vstest
      --reporters "['cleartext','html']" --ignore-methods "['Log*','*Exception.ctor']"
    - cp ./StrykerOutput/*/reports/mutation-report.html ../
    - mv ./StrykerOutput ../
  artifacts:
    name: MutationTesting
    paths:
      - StrykerOutput/
      - mutation-report.html
    expire_in: never
  rules: *rules_code_quality

package nuget dev:
  stage: package
  variables:
    BUILD_VER: "+$CI_COMMIT_SHORT_SHA"
  script:
    - dotnet pack --no-build --configuration $CONFIG_DEV --version-suffix $BUILD_VER --output ./
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - '*.nupkg'
    expire_in: 3 months
  rules:
    - if: *is_master
      when: never
    - if: *not_release

package nuget master:
  extends: package nuget dev
  script:
    - dotnet pack --no-build --configuration $CONFIG_DEV --output ./
  rules:
    - if: *is_master

package nuget release:
  stage: package
  script:
    - dotnet pack --no-build --configuration $CONFIG_RELEASE --output ./
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - '*.nupkg'
    expire_in: never
  rules: *rules_release

package dll release:
  stage: package
  script:
    - dotnet publish --no-build --configuration $CONFIG_RELEASE --output "./$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG/
    expire_in: never
  rules: *rules_release

push to nuget dev:
  stage: push
  variables:
    NUGET_PROJECT_ID: $NUGET_PROJECT_ID_DEV
    NUGET_USERNAME: $NUGET_USER_DEV
    NUGET_TOKEN: $NUGET_TOKEN_DEV
  before_script:
    - dotnet nuget add source --name reductech --username $NUGET_USERNAME
      --password $NUGET_TOKEN --store-password-in-clear-text
      "https://gitlab.com/api/v4/projects/$NUGET_PROJECT_ID/packages/nuget/index.json"
  script:
    - dotnet nuget push --source reductech *.nupkg
  rules: *rules_push_dev

push to nuget release:
  extends: push to nuget dev
  variables:
    NUGET_PROJECT_ID: $NUGET_PROJECT_ID_RELEASE
    NUGET_USERNAME: $NUGET_USER_PROD
    NUGET_TOKEN: $NUGET_TOKEN_PROD
  rules: *rules_push_release
